MONERO CORE ISSUES
wallet2 network type auto detected when loaded from files on disk
incoming transactions are missing when outgoing counterpart from same account (https://github.com/monero-project/monero/issues/4500)
add all_accounts to incoming_transfers, would be huge time saver
sometimes see non-zero spent amount in testCheckReserve()
WARNING: key proof indicates no funds received despite transfer (txid=76983ebf1d2e62141c19e190355e146145cb03988c5bfaf857b65dc0e15d378f, key=5246bf34d97dd379843ea31cb2bddfe41a89db73be4bd72fdc1ffe1b4d8ac70d, address=76gP3JEGAhnS5sgnB7LHRP2tbidL8ChvkJATJADQF4SpBcbN8bUgSZyQmTpdMQqyW129dh3zV5XscaBhkU6WTUKQVdDykFV, amount=44933)
occasional: seg fault 11 in testGetReserveProofAccount() (with no unlocked balance???), wallet rpc get_reserve_proof
wallet rpc `open_wallet` spends a lot of time generating ssl certificates and Trying to decrypt cache data when wallet is already open, can't just skip check?
ocasional: testGetTxsByIdsInPool() hangs (have no peer connections?)
ocasional: testGetTxsByIdsInPool() tx fails testTx() as double spend
one time: testCheckTxKey() -24: No tx secret key is stored for this tx, RPC request: 'get_tx_key' with params: {"txid":"e779dbb7fbff77544ea39de062b12c1d722901ed937a833307c1b5b3cea41069"}
Marking output 18666(<9cd46fd977f2d8f6112cc87592677cbd76801b318c6e607dd31b9a25dd7d9530>) as unspent, it was marked as spent
cannot send: -4: Known ring does not include the spent output: 1255232 (this fixed itself, not sure how)
file issue to get received timestamp for unconfirmed wallet txs if wanted
No message store file found: /Applications/190322-monero-master//test_wallet_1.mms
cannot save after creating wallet2 because store()/store_to() does not generate cache file when initially generated with empty strings
store() does nothing if no name previously set, throw exception instead?
store_to() is actually move(), deleting old files if they exist.  support "save as"
new wallet() without connection but restoreHeight is checkpointed; where is that data cached?
wallet_rpc_server.cpp:404: entry.address = m_wallet->get_subaddress_as_str({pd.m_subaddr_account, 0}) will always use subaddress idx 0, ignoring all actual subaddress indices
suggested_confirmations_threshold comes back as 0 for some (not all) outgoing transfers, but always >0 for incoming transfers, even if theyâ€™re transfers to/from the same wallet.  Can a value of 0 make sense?
document query_key spend_key parameter

14.1.0 RELEASE
add warnings to all deserialization methods for unrecognized fields
review wallet jni cpp for leaking memory
test notification of receiving funds
account label is actually first subaddress's label
MoneroOutputWallet implement merge in both Java and c++
tx merge should merge blocks if they're different in the same way that MoneroTransfer merges txs if they're different which comes back to transfers, repeat elsewhere in tree
MoneroBlock merge coinbaseTx does not set parent block reference
port changes from diff of jni39+ to master_bkp_jni to js
getAddressIndex() -> getSubaddress(String address) and that returns full subaddress info?
re-order getTxNotes() above setTxNotes()
re-order getOutputsHex() with other getOutputs() methods
document MoneroTxRequest, MoneroTransferRequest, MoneroTxRequest now has output request
update model with save(), moveTo()
test getAccounts(), getBalance(), etc with out of range subaddress/account indices (common wallet tests)
local vs remote requests per second auto-adjusts like gui wallet.cpp:2204
submodules should be external instead
revert last 2 changes to mymonero-core-cpp
calling methods after close will access released c++ resources
performance tests (memory leaks, concurrent wallets, maybe switch to native jni types, etc)
rename to setAttribute() setKeyValued()
testSendWithPaymentId() test that unconfirmed tx is immediately returned from getTxs() with payment id filter
preserve original send request instead of modifying it?  implement copy constructor
consistent accountIdx vs accountIndex in model vs api method args
rpc getIntegratedAddress(standardAddress, integratedAddress) wallet extension
getIntegratedAddress(standardAddress, paymentId) per make_integrated_wallet rpc
for consistency, MoneroTransfer has field isIncoming inherited by MoneroIncoming/OutgoingTransfer
wallet.getLanguage() api even if rpc doesn't supported?
local vs remote requests per second auto-adjusts like gui wallet.cpp:2204
test wallet.send() which is only in sample code currently
send tests should look for first account greater than fee
getUnrelayedTx() auto finds account idx if not given, would lessen -37s
add warning in PrintBalances.java if balance don't add up for any reason
untangle and re-file: incoming transactions are missing when outgoing counterpart from same account (https://github.com/monero-project/monero/issues/4500)
clearer dynamic library readme instructions, verify other platforms
testGetNewKeyImagesFromLastImport
refactor getAccounts(Boolean includeSubaddresses, Boolean isUsed, String tag, Boolean, Integer accountIdx, List<Integer> subaddressIndices, [includeBalaneDetails?]) that's filtering with most known options (in internal wallet rpc)
handle blocks_to_unlock at top level of get_balance call which reflects account, but is it based only on queried subaddresses?
balances: getBalanceWallet(), getBalanceAccount(), getBalancesSubaddress() : return MoneroBalances .getUnlockedBalance(), .getLockedBalance()
more convenient filtering, e.g. one filter class with getTxId(), getInTxPool(), getIsOutgoing(), which is used in getTransfers(), etc
remove typing on e.g. MoneroOutput.getVouts()?
daemon.getTx(id), wallet needs equivalent convenience function
testGetTransactionsWallet() how are txs in same order since internal implementation uses set?
wallet.getTxs() returns txs in no particular order
fetched vout's tx is incoming and outgoing are false
multisig_txset and unsigned_txset on send tests
test wallet gets should send test transaction so unconfirmed tx can be tested with the others
deterministic ordering of txs, vouts?
test priority in common tests (only in sample code currently)
api updates: setSubaddressIndices(...) and others, , getBalancesWallet, more convenient filtering, remove typing on vouts, etc
first open then create wallet in TestUtils
jni readme documentation
rename project to monero-java
scan code for issues using automated tool

API IDEAS
getTxsByIds, getTxById, vs getBlockById()
getTxs(req, str, str[]) | getTx(str)
getTxs(req), getTxsById(str|strs[]), getTxById(str)
port getTxs(req, string[], getTxs(String)
wallet.getTx(), getTxs() support many types (str, str[], req, obj) but they all get turned into req

NEXT
jni binding
wallet2 refactor
js local wallet
new wallet/daemon rest api
bisq integration
multisig
pruning
model rct_signatures, rct_prunable, unsigned_tx_set, etc

MONERO-RPC
HIGH
balances are wrong after sends (https://github.com/monero-project/monero/issues/4500)

MEDIUM
typos on monero-wallet-rpc tx proofs, wrong output on check_reserve_proof
get_transfer add tx_size, tx_key (out or pending), destinations (pending), key_image (in or mempool)
get_transfers should default to all subaddresses, else all subaddresses must be pre-fetched to get all txs in account
get_transfer_by_txid add tx_size
incoming_transfers add address (low priority), fee, timestamp, unlock_time, is_double_spend, height, tx_size (misdocumented)
get transactions per block

LOW
get_reserve_proof document default account 0
check_reserve_proof documentation spent and total not documented as outputs
-1: Failed to open wallet if wallet is already open; better code and message
don't return incorrect balance information if multisig, instead return error
get_transfers defaults [0, 0], incoming_transfers defaults [0, all], get_bulk_payments defaults [all, all] (especially get_transfers should default to all else call to get_address is required first)
get_transfers returns all transactions whereas incoming_transfers returns incoming outputs; clarify terminology or both could return transactions for consistency
document get_transfers account_index and subaddr_indices defaults
document that rescan_bc destroys wallet cache (destination addresses, etc)
height vs block_height inconsistent
address book entries work by index instead of id which changes
tx_hash in incoming_transfers vs txid in get_transfers; standardize on tx_hash or tx_id
standardize terminology transactions vs transfers
standardize terminology payment vs output; one payment may be fulfilled with multiple outputs
WALLET RPC ISSUES
daemon tx gets stuck in pool, get_transfers `timestamp` varies from call to call for tx stuck in pool; resolved by daemon.flushTxPool()
ocasional: testGetTxsByIdsInPool() hangs
ocasional: testGetTxsByIdsInPool() tx fails testTx() as double spend
ocasional: seg fault 11 in testGetReserveProofAccount() (with no unlocked balance???), wallet rpc get_reserve_proof
one time: testCheckTxKey() -24: No tx secret key is stored for this tx, RPC request: 'get_tx_key' with params: {"txid":"e779dbb7fbff77544ea39de062b12c1d722901ed937a833307c1b5b3cea41069"}
WARNING: key proof indicates no funds received despite transfer (txid=76983ebf1d2e62141c19e190355e146145cb03988c5bfaf857b65dc0e15d378f, key=5246bf34d97dd379843ea31cb2bddfe41a89db73be4bd72fdc1ffe1b4d8ac70d, address=76gP3JEGAhnS5sgnB7LHRP2tbidL8ChvkJATJADQF4SpBcbN8bUgSZyQmTpdMQqyW129dh3zV5XscaBhkU6WTUKQVdDykFV, amount=44933)
add all_accounts to incoming_transfers, would be huge time saver
Marking output 18666(<9cd46fd977f2d8f6112cc87592677cbd76801b318c6e607dd31b9a25dd7d9530>) as unspent, it was marked as spent
cannot send: -4: Known ring does not include the spent output: 1255232 (this fixed itself, not sure how)

14.0.3 RELEASE
verify consistency with java breaks
investigate differences in balances
report difference in timestamps for txs in pool
investigate seg fault 11 in testGetReserveProofAccount() (with no unlocked balance??? happened on fresh wallet, but send had run), wallet rpc get_reserve_proof
test fetch tx by id with unknown/invalid id
getTxsByIds, getTxById, vs getBlockById()
port changes to js
wallet.getVouts() -> wallet.getOutputs()
MoneroSendConfig -> MoneroSendRequest
test sweeps
promote daemon.getAsManyBlocksAsPossible to daemon interface?
update readme: document creation of wallet files for running tests
generate javadoc
release

investigate seg fault 11 in testGetReserveProofAccount()
clearer dynamic library readme instructions, verify other platforms
testGetNewKeyImagesFromLastImport
refactor getAccounts(Boolean includeSubaddresses, Boolean isUsed, String tag, Boolean, Integer accountIdx, List<Integer> subaddressIndices, [includeBalaneDetails?]) that's filtering with most known options (in internal wallet rpc)
handle blocks_to_unlock at top level of get_balance call which reflects account, but is it based only on queried subaddresses?
balances: getBalanceWallet(), getBalanceAccount(), getBalancesSubaddress() : return MoneroBalances .getUnlockedBalance(), .getLockedBalance()
more convenient filtering, e.g. one filter class with getTxId(), getInTxPool(), getIsOutgoing(), which is used in getTransfers(), etc
remove typing on e.g. MoneroOutput.getVouts()?
daemon.getTx(id), wallet needs equivalent convenience function
testGetTransactionsWallet() how are txs in same order since internal implementation uses set?
wallet.getTxs() returns txs in no particular order
fetched vout's tx is incoming and outgoing are false
multisig_txset and unsigned_txset on send tests
test wallet gets should send test transaction so unconfirmed tx can be tested with the others
deterministic ordering of txs, vouts?
test priority in common tests (only in sample code currently)
api updates: setSubaddressIndices(...) and others, , getBalancesWallet, more convenient filtering, remove typing on vouts, etc
first open then create wallet in TestUtils
rename monero-java-rpc -> monero-java

NEXT
clean up todos
jni binding
model rct_signatures and rct_prunable
multisig
pruning

MONERO-RPC
HIGH
balances are wrong after sends (https://github.com/monero-project/monero/issues/4500)
incoming transactions are missing when outgoing counterpart from same account (https://github.com/monero-project/monero/issues/4500)

MEDIUM
typos on monero-wallet-rpc tx proofs, wrong output on check_reserve_proof
get_transfer add tx_size, tx_key (out or pending), destinations (pending), key_image (in or mempool)
get_transfers should default to all subaddresses, else all subaddresses must be pre-fetched to get all txs in account
get_transfer_by_txid add tx_size
incoming_transfers add address (low priority), fee, timestamp, unlock_time, is_double_spend, height, tx_size (misdocumented)
get transactions per block

LOW
get_reserve_proof document default account 0
check_reserve_proof documentation spent and total not documented as outputs
outgoing transactions src subaddress always 0, not actual src subaddresses
-1: Failed to open wallet if wallet is already open; better code and message
don't return incorrect balance information if multisig, instead return error
get_transfers defaults [0, 0], incoming_transfers defaults [0, all], get_bulk_payments defaults [all, all] (especially get_transfers should default to all else call to get_address is required first)
get_transfers returns all transactions whereas incoming_transfers returns incoming outputs; clarify terminology or both could return transactions for consistency
document get_transfers account_index and subaddr_indices defaults
document that rescan_bc destroys wallet cache (destination addresses, etc)
height vs block_height inconsistent
address book entries work by index instead of id which changes
tx_hash in incoming_transfers vs txid in get_transfers; standardize on tx_hash or tx_id
standardize terminology transactions vs transfers
standardize terminology payment vs output; one payment may be fulfilled with multiple outputs